
import React, { useState } from 'react';
import { View, Text, TextInput, ScrollView, StyleSheet, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { router, Stack } from 'expo-router';
import { Button } from '@/components/button';
import { useCartContext } from '@/contexts/CartContext';
import { colors, commonStyles } from '@/styles/commonStyles';
import { ContactInfo } from '@/types/Product';

export default function CheckoutScreen() {
  const { cartItems, getTotalPrice, clearCart } = useCartContext();
  const [contactInfo, setContactInfo] = useState<ContactInfo>({
    name: '',
    phone: '',
    email: '',
    address: '',
    message: '',
  });

  const handleSubmit = async () => {
    console.log('Submitting order with contact info:', contactInfo);
    
    if (!contactInfo.name.trim() || !contactInfo.phone.trim() || !contactInfo.address.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å');
      return;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const orderDetails = cartItems.map(item => 
        `${item.product.name} - ${item.quantity} —à—Ç.`
      ).join('\n');

      const message = `üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${contactInfo.name}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${contactInfo.phone}\n` +
        `üìß Email: ${contactInfo.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìç –ê–¥—Ä–µ—Å: ${contactInfo.address}\n\n` +
        `üì¶ –ó–∞–∫–∞–∑:\n${orderDetails}\n\n` +
        `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${contactInfo.message || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram Bot API
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
      console.log('Order message for Telegram:', message);
      
      Alert.alert(
        '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        [
          {
            text: 'OK',
            onPress: () => {
              clearCart();
              router.replace('/(tabs)');
            },
          },
        ]
      );
    } catch (error) {
      console.error('Error submitting order:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  return (
    <SafeAreaView style={commonStyles.wrapper}>
      <Stack.Screen options={{ title: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞' }} />
      
      <ScrollView contentContainerStyle={styles.container}>
        <Text style={commonStyles.title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</Text>
        
        <View style={commonStyles.card}>
          <Text style={styles.sectionTitle}>–í–∞—à –∑–∞–∫–∞–∑</Text>
          {cartItems.map((item) => (
            <View key={item.product.id} style={styles.orderItem}>
              <Text style={styles.itemName}>{item.product.name}</Text>
              <Text style={styles.itemDetails}>
                {item.quantity} —à—Ç.
              </Text>
            </View>
          ))}
        </View>

        <View style={commonStyles.card}>
          <Text style={styles.sectionTitle}>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Text>
          
          <TextInput
            style={commonStyles.input}
            placeholder="–í–∞—à–µ –∏–º—è *"
            value={contactInfo.name}
            onChangeText={(text) => setContactInfo(prev => ({ ...prev, name: text }))}
          />
          
          <TextInput
            style={commonStyles.input}
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω *"
            value={contactInfo.phone}
            onChangeText={(text) => setContactInfo(prev => ({ ...prev, phone: text }))}
            keyboardType="phone-pad"
          />
          
          <TextInput
            style={commonStyles.input}
            placeholder="Email"
            value={contactInfo.email}
            onChangeText={(text) => setContactInfo(prev => ({ ...prev, email: text }))}
            keyboardType="email-address"
            autoCapitalize="none"
          />
          
          <TextInput
            style={[commonStyles.input, styles.addressInput]}
            placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *"
            value={contactInfo.address}
            onChangeText={(text) => setContactInfo(prev => ({ ...prev, address: text }))}
            multiline
            numberOfLines={3}
            textAlignVertical="top"
          />
          
          <TextInput
            style={[commonStyles.input, styles.messageInput]}
            placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
            value={contactInfo.message}
            onChangeText={(text) => setContactInfo(prev => ({ ...prev, message: text }))}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
          />
        </View>

        <View style={styles.infoCard}>
          <Text style={styles.infoTitle}>üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</Text>
          <Text style={styles.infoText}>
            –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ Telegram. 
            –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
          </Text>
        </View>

        <View style={styles.buttonContainer}>
          <Button onPress={handleSubmit} style={styles.submitButton}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
          </Button>
          
          <Button 
            onPress={() => router.back()} 
            style={styles.backButton}
            variant="secondary"
          >
            –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ
          </Button>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 16,
  },
  orderItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: colors.grey,
  },
  itemName: {
    fontSize: 16,
    color: colors.text,
    flex: 1,
    marginRight: 12,
  },
  itemDetails: {
    fontSize: 14,
    color: colors.textLight,
  },
  addressInput: {
    height: 80,
  },
  messageInput: {
    height: 100,
  },
  infoCard: {
    backgroundColor: colors.secondary,
    borderRadius: 12,
    padding: 16,
    marginVertical: 16,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: colors.textLight,
    lineHeight: 20,
  },
  buttonContainer: {
    marginTop: 20,
  },
  submitButton: {
    backgroundColor: colors.primary,
    marginBottom: 12,
  },
  backButton: {
    backgroundColor: colors.backgroundAlt,
  },
});
